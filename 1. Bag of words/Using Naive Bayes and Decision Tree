# -*- coding: utf-8 -*-
"""
Created on Sat Dec 21 18:22:34 2019

@author: vchan
"""

#Import the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#Import the dataset
df = pd.read_csv(r"C:\Users\vchan\OneDrive\Desktop\Ended\INSY 662 - Data mining\Extra\NLP\Restaurant_Reviews.tsv", delimiter = '\t', quoting = 3)

#delimiter it to specify tab separator
#quoting removes a specific character

#Cleaning
import re

#Keep only alphabets
review = re.sub('[^a-zA-Z]', ' ', df['Review'][0])

#Convert all letters to lowercase
review = review.lower()

#Remove filler words and stem

import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

review = review.split()
ps= PorterStemmer()
review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]

#Re-join the words
review = ' '.join(review)

#Cleaning all the reviews

corpus = []
for i in range(0,len(df)):
    review = re.sub('[^a-zA-Z]', ' ', df['Review'][i])
    review = review.lower()
    review = review.split()
    ps= PorterStemmer()
    review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]
    review = ' '.join(review)
    corpus.append(review)

#Create bag of words model
from sklearn.feature_extraction.text import CountVectorizer

cv = CountVectorizer(max_features = 1500)
#max_features to take top high frequency words

X = cv.fit_transform(corpus).toarray()
y = df.iloc[:,1].values

#-------------------Use Naive Bayes algorithm--------------------

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 5)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Fitting Naive Bayes to the Training set
from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)


#-------------------Decision Trees--------------------

from sklearn.tree import DecisionTreeClassifier
decisiontree= DecisionTreeClassifier(max_depth=3)
model = decisiontree.fit(X_train, y_train)
y_test_pred = model.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)


